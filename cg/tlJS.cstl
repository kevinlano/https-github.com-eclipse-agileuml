
















nestedfunc104::
int |-->0
double |-->0.0
long |-->0
String |-->""
OclDate |-->null
OclProcess |-->null
OclFile |-->null
OclType |-->null
_* |-->null

ruleset106::
; |--> 
_1 |-->_1
_0 |-->_0

OclUnaryExpression::
_1 _2  |-->_1`func34 _2 

OclOperation::
operation _2 ( ) : void pre: true  post: true  activity: _12  |-->this . _2 = function ( ) { _12 } ; 
operation _2 ( _* ) : void pre: true  post: true  activity: _13  |-->this . _2 = function ( _*`ruleset100 ) { _13 } ; 
query _2 ( ) : _6 pre: true  post: true  activity: _12  |-->this . _2 = function ( ) { _12 } ; 
query _2 ( _* ) : _7 pre: true  post: true  activity: _13  |-->this . _2 = function ( _*`ruleset79 ) { _13 } ; 

OclBinaryExpression::
_1 <= _3  |-->_1 <= _3 
_1 mod _3  |-->_1 % _3 
_1 or _3  |-->_1 || _3 
_1 & _3  |-->_1 && _3 
_1 * _3  |-->_1 * _3 
_1 + _3  |-->_1 + _3 
_1 - _3  |-->_1 - _3 
_1 /= _3  |-->_1 != _3 
_1 / _3  |-->_1 / _3 
_1 div _3  |-->Math . trunc ( _1 / _3 ) 
_1 <>= _3  |-->_1 === _3 
_1 < _3  |-->_1 < _3 
_1 = _3  |-->_1 == _3 
_1 > _3  |-->_1 > _3 
_1 >= _3  |-->_1 >= _3 

ruleset45::
; |--> 
_1 := _3  |-->_1 = _3 ; 
_1 |-->_1

OclType::
void  |-->Null 
OclAny  |-->Object 
int |-->Number
double |-->Number
long |-->Number
boolean |-->Boolean
String  |-->String 
Set ( _3 )  |-->Object 
Sequence ( _3 )  |-->Object 
_1  |-->Object <when> _1 Class
Function ( _3 , _5 )  |-->Function 
Map ( _3 , _5 )  |-->Map 
_* |-->Number

ruleset36::
_1 |-->_1
_* |-->_*`ruleset36

nestedfunc28::
self |-->this
_1 |-->_1
_* |-->null

ruleset79::
_1 : _3  |-->_1 
_* |-->_*`ruleset79

ruleset38::
_1 |-->_1
_* |-->_*`ruleset38

OclConditionalExpression::
if _2 then _4 else _6 endif  |-->( _2 ) ? _4 : _6 

OclClass::
class _2 { }  |-->function _2 ( ) { } 
class _2 { _4 }  |-->function _2 ( ) { _4`subruleset107 } 

func35::
int |-->Number
double |-->Number
long |-->Number
boolean |-->Boolean
_* |-->Number

OclCollectionExpression::
Set { _* }  |-->[ _*`ruleset36 ] 
Sequence { _* }  |-->[ _*`ruleset38 ] 
_1 { }  |-->[ elementList ] 

subruleset31::
_* |-->( _* )

func34::
not |-->!
_1 |-->_1
_* |-->-

nestedfunc48::
String |-->""
int |-->0
double |-->0.0
long |-->0
boolean |-->false
OclType |-->null
OclAny |-->null
OclProcess |-->null
_* |-->null

subruleset107::
_* |-->_*`ruleset106

subruleset46::
_* |-->_*`ruleset45

ruleset100::
_1 : _3  |-->_1 
_* |-->_*`ruleset100

OclAttribute::
attribute _2 : _4  |-->this . _2 = _4`nestedfunc104 ; 

OclBasicExpression::
self |-->this
_1 . _3 ( )  |-->_1 . _3 ( ) 
_1 [ _3 ]  |-->_1 [ _3 - 1 ] 
_1 . _3 ( _5 )  |-->_1 . _3 _5`subruleset31 
_1 . _3  |-->_1 . _3 
_1  |-->_1 <when> _1 Integer
_1  |-->_1 <when> _1 Real
_1  |-->_1 <when> _1 Boolean
_1  |-->_1 <when> _1 String
_1 |-->_1
_* |-->null

OclStatement::
( _2 )  |-->{ _2`subruleset46 } 
return _2  |-->return _2 ; 
call _2  |-->_2 ; 
var _2 : _4  |-->let _2 = _4`nestedfunc48 ; 
while _2 do _4  |-->while ( _2 ) { _4 } 
_1 := _3  |-->_1 = _3 ; 
if _2 then _4 else _6  |-->if ( _2 ) { _4 } else { _6 } 
for _2 : _4 do _6  |-->for ( var _2 of _4 ) { _6 } 
break  |-->break ; 
continue  |-->continue ; 
return  |-->return ; 



