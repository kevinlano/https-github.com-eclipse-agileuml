operationDefinition::
operation _1 ( ) : _2 pre: true post: true activity: _3 ; |-->operation _1() : _2 pre: true post: true activity: while true do (_3`replaceCall) ;<when> _3`recursiveCall matches (_1)+<action> _91 _1
operation _1 ( ) : _2 pre: true post: true activity: _3 ; |-->operation _1() : _2 pre: true post: true activity: _3;


statementList::
_1 |-->_1
_1 ; skip |-->_1
skip ; _* |-->_*
break ; _* |-->break
continue ; _* |-->continue
return ; _* |-->return
return _1 ; _* |-->return _1
_* |-->_*


statement::
skip |-->skip 
return |-->return
continue |-->continue
break |-->break 
var _1 : _2 |-->var _1 : _2
var _1 : _2 := _3 |-->var _1 : _2 := _3

if true then _1 else _2 |-->_1
if false then _1 else _2 |-->_2
if _1 then _2 else _2 |-->_2
 
if _1 then _2 else skip |-->if _1 then _2 else skip  
if _1 then _2 else _3 |-->if _1 then _2 else skip; _3<when> _2`endsWithReturn true
if _1 then _2 else _3 |-->if _1 then _2 else _3  
  
while false do _1 |-->skip
while _1 do _2 |-->while _1 do _2 

for _1 : Set{} do _2 |-->skip 
for _1 : Sequence{} do _2 |-->skip 
for _1 : _2 do _3 |-->for _1 : _2 do _3
 
return _1 |-->return _1 
_1 := _1 |-->skip
_1 := _2 |-->_1 := _2 

skip ; _1 |-->_1
_1 ; skip |-->_1
return ; _1 |-->return
continue ; _1 |-->continue
break ; _1 |-->break

_1 ; _2 |-->_1 ; _2  
execute _1 |-->execute _1 
call _1 |-->call _1 
( skip ) |-->skip
( _1 ) |-->(_1)



recursiveCall::
skip |--> 
return |-->
continue |-->
break |--> 
var _1 : _2 |--> 
if _1 then _2 else _3 |-->_2`recursiveCall_3`recursiveCall  
while _1 do _2 |-->_2`recursiveCall 
for _1 : _2 do _3 |-->_3`recursiveCall 
return _1 |-->_1`calledOperation
_1 := _2 |--> 
_1 ; _2 |-->_1`recursiveCall_2`recursiveCall  
execute _1 |-->
call _1 |-->_1`calledOperation 
( _1 ) |-->_1`recursiveCall

replaceCall::
skip |-->skip 
return |-->return
continue |-->continue
break |-->break 
var _1 : _2 |-->var _1 : _2 
if _1 then _2 else _3 |-->if _1 then _2`replaceCall else _3`replaceCall  
while _1 do _2 |-->while _1 do _2`replaceCall 
for _1 : _2 do _3 |-->for _1 : _2 do _3`replaceCall 
return _1 |-->continue<when> _1`calledOperation _91
return _1 |-->return _1 
_1 := _2 |-->_1 := _2 
_1 ; _2 |-->_1`replaceCall ; _2`replaceCall  
execute _1 |-->execute _1 
call _1 |-->continue<when> _1`calledOperation _91 
call _1 |-->call _1 
( _1 ) |-->(_1`replaceCall)


calledOperation::
self . _1 ( ) |-->_1
_1 ( ) |-->_1`calledOperation
self . _1 |-->_1
_1 . _2 |-->
_1 |-->_1`calledOperation<when> _1 expression
_1 |-->_1`calledOperation<when> _1 logicalExpression
_1 |-->_1`calledOperation<when> _1 equalityExpression
_1 |-->_1`calledOperation<when> _1 additiveExpression
_1 |-->_1`calledOperation<when> _1 factorExpression
_1 |-->_1`calledOperation<when> _1 factor2Expression
_1 |-->_1`calledOperation<when> _1 basicExpression
_1 |-->


endsWithReturn::
skip |-->false
return |-->true
return _1 |-->true

continue |-->false
break |-->false
var _1 : _2 |-->false 

if _1 then _2 else skip |-->false
if _1 then _2 else _3 |-->_3`endsWithReturn<when> _2`endsWithReturn

while _1 do _2 |-->false
for _1 : _2 do _3 |-->false
_1 := _2 |-->false
_1 ; _2 |-->_2`endsWithReturn
  
execute _1 |-->false
call _1 |-->false 
( _1 ) |-->(_1`endsWithReturn)
 


identifier::
_1 |-->_1

type::
_1 |-->_1

expression::
_1 |-->_1


logicalExpression::
_1 _2 _3 |-->_1 _2 _3
_1 _2 |-->_1 _2
_1 |-->_1

equalityExpression::
_1 _2 _3 |-->_1 _2 _3
_1 _2 |-->_1 _2
_1 |-->_1

additiveExpression::
_1 _2 _3 |-->_1 _2 _3
_1 _2 |-->_1 _2
_1 |-->_1

factorExpression:: 
_1 _2 _3 |-->_1 _2 _3
_1 _2 |-->_1 _2
_1 |-->_1

factor2Expression::
_1 _2 _3 _4 _5 _6 _7 |-->_1 _2 _3 _4 _5 _6 _7 
_1 _2 _3 _4 _5 _6 |-->_1 _2 _3 _4 _5 _6
_1 _2 _3 _4 _5 |-->_1 _2 _3 _4 _5
_1 _2 _3 _4 |-->_1 _2 _3 _4
_1 _2 _3 |-->_1 _2 _3
_1 _2 |-->_1 _2
_1 |-->_1
( _1 ) |-->(_1)


basicExpression::
_1 ( ) |-->_1()
_1 . _2 |-->_1._2
_1 _2 _3 _4 |-->_1 _2 _3 _4
_1 _2 _3 |-->_1 _2 _3
_1 _2 |-->_1 _2
_1 |-->_1
( _1 ) |-->(_1)





