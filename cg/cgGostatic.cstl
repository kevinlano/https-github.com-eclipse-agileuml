Type::
int |-->int
long |-->int64
boolean |-->bool
double |-->float64
String |-->string

OclAny |-->interface{}
OclFile |-->*oclfile.OclFile
OclProcess |-->*oclprocess.OclProcess
OclRandom |-->*oclrandom.OclRandom
OclDate |-->*ocldate.OclDate
OclType |-->reflect.Type
OclIterator |-->*ocliterator.OclIterator

OclException |-->*oclexception.OclException
AssertionException |-->*oclexception.AssertionException
ArithmeticException |-->*oclexception.ArithmeticException
IOException |-->*oclexception.IOException
IndexingException |-->*oclexception.IndexingException
NullAccessException |-->*oclexception.NullAccessException
AccessingException |-->*oclexception.AccessingException
ProgramException |-->*oclexception.ProgramException
SystemException |-->*oclexception.SystemException

void |-->

Sequence |-->*list.List
Set |-->*list.List
Map |-->map[interface{}]interface{}

Sequence(_1) |-->*list.List
Set(_1) |-->*list.List
Sequence(_1) |-->*list.List
Set(_1) |-->*list.List

Ref(void) |-->*interface{}
Ref(int) |-->*int
Ref(long) |-->*int64
Ref(double) |-->*float64
Ref(String) |-->*string
Ref(boolean) |-->*bool
Ref(_1) |-->_1<when> _1 Ref
Ref(_1) |-->_1<when> _1 Function
Ref(_1) |-->*_1`name<when> _1 Class
Ref(_1) |-->*_1
Ref |-->*interface{}

Map(_1,_2) |-->map[_1]_2
Function(_1,_2) |-->func(_1) _2

_1 |-->_1`alias<when> _1 datatype

_1 |-->*_1`name<when> _1 Class

_1 |-->_1




Attribute::
static attribute _1 : _2 := _3; |-->var _1 _2\n\nfunc initialise_1() {\n  _1 = _3`cgGooperations\n}\n\n

static attribute _1 : _2; |-->var _1 _2\n

identity attribute _1 : _2; |-->var _1`ownername_index = make(map[_2]*_1`ownername)\n\nfunc createByPK_1`ownername(_1 _2) *_1`ownername {\n  var res *_1`ownername\n  res = &_1`ownername{}\n  _1`ownername_instances.PushBack(res)\n  res._1 = _1\n  _1`ownername_index[_1] = res\n  return res\n}\n\nfunc GetByPK_1`ownername(_1 _2) *_1`ownername {\n  return _1`ownername_index[_1]\n}\n\n 


attribute _1 : _2 := _3; |-->

attribute _1 : _2; |-->

reference _1 : _2; |-->




Operation::
query _1(_2) : _3 pre: _4 post: _5 activity: _6 |-->

operation _1(_2) : _3 pre: _4 post: _5 activity: _6 |-->

operation _1<_2>(_3) : _4 pre: _5 post: _6 activity: _7 |-->

static query _1(_2) : _3 pre: _4 post: _5 activity: _6 |-->

static operation _1(_2) : _3 pre: _4 post: _5 activity: _6 |-->

static operation _1<_2>(_3) : _4 pre: _5 post: _6 activity: _7 |-->

