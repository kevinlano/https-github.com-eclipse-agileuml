/* This translates MathOCL to Mamba */

specification::
specification _1 _* <EOF> |-->function void _1() {\n_*`definesToAttributes\n}\n\n
specification _1 _* |-->function void _1() {\n_*`definesToAttributes\n}\n\n


part::
_1 |-->_1\n


constraint::
Constraint on _1 | _2 |-->\n /* invariant _2 */\n

theorem::
Theorem _1 when _2 |-->

rewrite::
Rewrite _1 to _2 |-->


prove::
Prove _1 if _2 |-->\n /* invariant _2 => _1 */\n


simplify::
Simplify _1 |-->\n /* invariant _1 */\n


expanding::
Expanding _1 to _2 |-->


expandTo::
Expand _1 to _2 terms |-->


substituting::
Substitute _1 for _2 in _3 |-->\n /* invariant _3 */\n<action> _1 / _2

solve::
Solve _* for _+ |-->

expressAs::
Express _1 as polynomial in _2 |-->


formula::
Define _1 |-->
Define _1 = _2 |-->\n\n  function double _1`operationName(_1`operationParameters)\n  { return _2; }
Define _1 ~ _2 |--> 
Define _1 : _2 |-->
Define _1 : _2 = _3 |-->\n\n  function _2 _1`operationName(_1`operationParameters)\n  { return _3; }


operationName::
_1 ( ) |-->_1
_1 ( _2 ) |-->_1
_1 |-->_1Definition

operationParameters::
_1 ( ) |-->
_1 ( _2 ) |-->_2`parameterDeclarations
_1 |-->

parameterDeclarations::
_1 |-->double _1
_1 , _* |-->double _1, _*`recurse




factorBy::
Factor _1 by _2 |-->

cancelIn::
Cancel _1 in _2 |-->

substituteIn::
Substitute _1 in _2 |-->_2<when> _2 expression
Substitute _1 in _2 |-->


definesToAttributes::
Define _1 = _2 |-->\n  double _1 = _2;<when> _1`isIdentifier true
Define _1 |-->\n  double _1;
Define _1 ~ _2 |-->\n  OclRandom _1 = OclRandom.newOclRandom_2`randomParameters; 

_1 |-->_1`definesToAttributes<when> _1 formula
Constraint on _1 | _2 |-->
Prove _1 if _2 |-->
Expanding _1 to _2 |--> 
Substitute _1 for _2 in _3 |-->
Solve _* for _+ |-->
Express _1 as _2 |-->
_1 |-->
_1 _* |-->


idList::
_1 |-->_1
_1 , _* |-->_1,_*`recurse


type::
Sequence ( _1 ) |-->Array[_1]  
Set ( _1 ) |-->Collection[_1]  
OrderedSet ( _1 ) |-->Array[_1]  
Bag ( _1 ) |-->Array[_1]  
Map ( _1 , _2 ) |-->Dictionary[_1,_2] 
Function ( _1 , _2 ) |-->Func[_1,_2] 
Ñ |-->int
Ž |-->int
® |-->double
boolean |-->bool
String |-->string
Date |-->OclDate
_1 |-->_1


expression::
_1 |-->_1


expressionList::
_1 |-->_1
_1 , _* |-->_1,_*`recurse


conditionalExpression::
if true then _1 else _2 endif |-->_1
if false then _1 else _2 endif |-->_2

if _1 then _2 else _2 endif |-->_2

if _1 then _2 else _3 endif |-->(_1)?(_2):(_3)


logicalExpression::
_1 & _2 |-->_1 && _2
_1 or _2 |-->_1 || _2

_1 => _1 |-->true
false => _1 |-->true
_1 => true |-->true
_1 => false |-->!(_1)
_1 => _2 |-->(_1 ? _2 : true)

£ _1 : _2 • true |-->true
£ _1 : _2 • false |-->false
£ _1 : _2 • _3 |-->(_2).Any( _1 => _3 )

¡ _1 : _2 • _3 |-->(_2).All( _1 => _3 )

_1 _2 _3 |-->_1 _2 _3

not true |-->false
not false |-->true
not _1 |-->!(_1)

_1 |-->_1


equalityExpression::
_1 = _2 |-->_1 == _2
_1 /= _2 |-->_1 != _2
_1 < _1 |-->false
_1 < _2 |-->_1 < _2
_1 > _1 |-->false
_1 > _2 |-->_1 > _2
_1 <= _1 |-->true
_1 <= _2 |-->_1 <= _2
_1 >= _1 |-->true
_1 >= _2 |-->_1 >= _2

_1 © Ø |-->false
_1 ¢ Ø |-->true

_1 © _2 |-->(_2).Contains(_1)
_1 ¢ _2 |-->!(_2).Contains(_1)

_1 _2 _3 |-->_1 _2 _3
_1 |-->_1


additiveExpression::
_1 + 0 |-->_1
0 + _1 |-->_1
_1 + 0.0 |-->_1
0.0 + _1 |-->_1
_1 + _1 |-->2*(_1)
_1 + _2 |-->_1 + _2
_1 - 0 |-->_1
_1 - 0.0 |-->_1
_1 - _1 |-->0
_1 - _2 |-->_1 - _2

_1 _2 _3 |-->_1 _2 _3
_1 |-->_1


factorExpression::
1 * _1 |-->_1
_1 * 1 |-->_1
1.0 * _1 |-->_1
_1 * 1.0 |-->_1
0 * _1 |-->0
_1 * 0 |-->0
0.0 * _1 |-->0
_1 * 0.0 |-->0
_1 * _2 |-->_1*_2

_1 / 1 |-->_1
_1 / 1.0 |-->_1
_1 / _1 |-->1
0 / _1 |-->0
0.0 / _1 |-->0
_1 / _2 |-->_1/_2

- 0 |-->0
-0.0 |-->0
- _1 |-->-_1

0 ! |-->1
1 ! |-->1
_1 ! |-->MathLib.factorial(_1)

_1 ´ |-->_1´


† 0 |-->0
† 1 |-->1
† _1 |-->Math.Sqrt(_1)

‡ _1 _2 |-->_1*_2`tail<when> _1 integer
‡ _1 _2 |-->_1*_2`tail<when> _1 real
‡ x dx |-->(x^(2)/2)
‡ _1 dx |-->MathLib.indefiniteIntegral((double x) => _1)

‡ _1 _2 |-->MathLib.indefiniteIntegral((double _2`tail) => _1)

‡ _{ _1 } ^{ _2 } _3 _4 |-->_3*(_2 - _1)<when> _3 integer
‡ _{ _1 } ^{ _2 } _3 _4 |-->_3*(_2 - _1)<when> _3 real

‡ _{ _1 } ^{ _2 } x dx |-->0.5*(_2^(2) - _1^(2))
‡ _{ _1 } ^{ _2 } _3 _4 |-->MathLib.definiteIntegral(_1, _2, (double _4`tail) => _3) 

€ _{ _1 } ^{ _2 } _3 |-->_3*(_2 - _1`rhs + 1)<when> _3 integer
€ _{ _1 } ^{ _2 } _3 |-->_3*(_2 - _1`rhs + 1)<when> _3 real
€ _{ _1 } ^{ _2 } _3 |-->MathLib.Sum((int _1`lhs) => _3, _1`rhs, _2)

× _{ _1 } ^{ _2 } _3 |-->_3^(_2 - _1`rhs + 1)<when> _3 integer
× _{ _1 } ^{ _2 } _3 |-->_3^(_2 - _1`rhs + 1)<when> _3 real
× _{ _1 } ^{ _2 } _3 |-->MathLib.Prd((int _1`lhs) => _3, _1`rhs, _2)

C_ { 0 } ^{ _1 } |-->1
C_ { _1 } ^{ _1 } |-->1
C_ { 1 } ^{ _1 } |-->_1
C_ { _1 } ^{ _2 } |-->MathLib.combinatorial(_2,_1)
 
E[ _1 ] |-->_1.mean()

_1 |-->_1


factor2Expression::
_1 ^{ 1 } |-->_1
1 ^{ _1 } |-->1
_1 ^{ 0 } |-->1
0 ^{ 2 } |-->0
0 ^{ 3 } |-->0

e ^{ _1 } |-->MathLib.Exp(_1)

_1 ^{ _2 } |-->_1^(_2)

_1 _{ _2 } |-->_1.Get(_2-1)

_1 _2 |-->_1_2

_1 |-->_1


basicExpression::
e |-->MathLib.eValue()
0.0 |-->0
1.0 |-->1

Ø |-->(new Collection[double])
… |-->math.infinity

g{ p } |-->Math.Pi()
g{ a } |-->alpha
g{ b } |-->beta
g{ c } |-->chi
g{ g } |-->gamma
g{ d } |-->delta
g{ e } |-->epsilon
g{ f } |-->theta
g{ k } |-->kappa
g{ m } |-->mu
g{ n } |-->nu
g{ o } |-->omega
g{ s } |-->sigma
g{ r } |-->rho
g{ t } |-->tau
g{ z } |-->zeta
g{ _1 } |-->_1_Greek

sin ( 0 ) |-->0
cos ( 0 ) |-->1
tan ( 0 ) |-->0
exp ( 0 ) |-->1
log ( 1 ) |-->0
log ( e ) |-->1
cosh ( 0 ) |-->1
sinh ( 0 ) |-->0
tanh ( 0 ) |-->0
sech ( 0 ) |-->1

cosec ( _1 ) |-->(1.0/Math.Sin(_1))
sec ( _1 ) |-->(1.0/Math.Cos(_1))
cot ( _1 ) |-->(1.0/Math.Tan(_1))

acosec ( _1 ) |-->Math.Asin(1.0/_1)
asec ( _1 ) |-->Math.Acos(1.0/_1)
acot ( _1 ) |-->Math.Atan(1.0/_1)

cosech ( _1 ) |-->(1.0/sinh(_1))
sech ( _1 ) |-->(1.0/cosh(_1))
coth ( _1 ) |-->(1.0/tanh(_1))

acosech ( _1 ) |-->MathLib.asinh(1.0/_1)
asech ( _1 ) |-->MathLib.acosh(1.0/_1)
acoth ( _1 ) |-->MathLib.atanh(1.0/_1)

sin ( _1 ) |-->Math.Sin(_1)
cos ( _1 ) |-->Math.Cos(_1)
tan ( _1 ) |-->Math.Tan(_1)

sinh ( _1 ) |-->sinh(_1)
cosh ( _1 ) |-->cosh(_1)
tanh ( _1 ) |-->tanh(_1)

exp ( _1 ) |-->exp(_1)
log ( _1 ) |-->log(_1)
log10 ( _1 ) |-->log10(_1)

ceil ( _1 ) |-->Math.Ceil(_1)
floor ( _1 ) |-->Math.Floor(_1)
round ( _1 ) |-->Math.Round(_1,0)

min ( _1 ) |-->(_1).Min(x => x)
max ( _1 ) |-->(_1).Max(x => x)

Binomial ( _1 ) |-->excel.Binom_Dist_Range(_1`third,_1`last,_1`first,_1`third)

var ( _1 ) |-->_1.variance()
Date ( _1 ) |-->OclDate.newOclDate_String(_1)
Time ( _1 ) |-->OclDate.newOclDate_Time(_1)

accumulatedInterest ( _1 ) |-->financeLib.accumulatedInterest(_1)
Binomial ( _1 ) |-->excel.Binom_Dist_Range(_1`third,_1`last,_1`first,_1`third)
bondPrice ( _1 ) |-->financeLib.bondPrice(_1)
bondPriceClean ( _1 ) |-->financeLib.bondPriceClean(_1)

_1 ( _2 ) |-->_1(_2)
_1 ( ) |-->_1()

( true ) |-->true
( false ) |-->false
( x ) |-->x
( _1 ) |-->_1<when> _1 integer
( _1 ) |-->_1<when> _1 real
( _1 ) |-->_1<when> _1`isIdentifier true
( _1 ) |-->_1<when> _1`bracketed true
( _1 ) |-->(_1)

_1 [ _2 ] |-->_1.Get(_2-1)

_1 . _2 |-->_1._2

_1 |-->_1


setExpression::
{ _1 : _2 | _3 } |-->(_2).Where( _1 => _3 )
{ _1 : _2 | _3 • _4 } |-->(_2).Where( _1 => _3 ).Select( _1 => _4)
  

identifier::
_1 |-->_1


rhs::
_1 = _2 |-->_2
_1 |-->_1<when> _1 identifier
_1 |-->_1<when> _1 integer
_1 |-->_1<when> _1 real
_1 |-->_1`rhs

lhs::
_1 = _2 |-->_1
_1 |-->_1<when> _1 identifier
_1 |-->_1<when> _1 integer
_1 |-->_1<when> _1 real
_1 |-->_1`lhs




isIdentifier::
g{ _1 } |-->true

_1 ( _2 ) |-->false
_1 ( ) |-->false

( _1 ) |-->_1`isIdentifier

_1 |-->_1`isIdentifier<when> _1 basicExpression
_1 |-->_1`isIdentifier<when> _1 factorExpression
_1 |-->_1`isIdentifier<when> _1 factor2Expression
_1 |-->_1`isIdentifier<when> _1 logicalExpression
_1 |-->_1`isIdentifier<when> _1 equalityExpression
_1 |-->_1`isIdentifier<when> _1 additiveExpression
_1 |-->_1`isIdentifier<when> _1 expression

_1 |-->true<when> _1 identifier
_1 |-->false


bracketed::
( _1 ) |-->true

_1 |-->_1`bracketed<when> _1 basicExpression
_1 |-->_1`bracketed<when> _1 factorExpression
_1 |-->_1`bracketed<when> _1 factor2Expression
_1 |-->_1`bracketed<when> _1 logicalExpression
_1 |-->_1`bracketed<when> _1 equalityExpression
_1 |-->_1`bracketed<when> _1 additiveExpression
_1 |-->_1`bracketed<when> _1 expression

_1 |-->false


randomParameters::
N ( _1 ) |-->Normal(_1)
Bernoulli ( _1 ) |-->Bernoulli(_1)
Binom ( _1 ) |-->Binom(_1)
U ( ) |-->Uniform(0.0, 1.0)
U ( _1 ) |-->Uniform(_1)
Poisson ( _1 ) |-->Poisson(_1)

( _1 ) |-->_1`randomParameters

_1 |-->_1`randomParameters<when> _1 basicExpression
_1 |-->_1`randomParameters<when> _1 factorExpression
_1 |-->_1`randomParameters<when> _1 factor2Expression
_1 |-->_1`randomParameters<when> _1 logicalExpression
_1 |-->_1`randomParameters<when> _1 equalityExpression
_1 |-->_1`randomParameters<when> _1 additiveExpression
_1 |-->_1`randomParameters<when> _1 expression

_1 |-->0
_* |-->0

