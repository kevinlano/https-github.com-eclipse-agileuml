Attribute::
static attribute _1 : _2 := _3; |-->

static attribute _1 : _2; |-->

identity attribute _1 : _2; |-->

attribute _1 : _2 := _3; |-->

attribute _1 : _2; |-->

reference _1 : _2; |-->


Type::
int |-->int
long |-->int64
boolean |-->bool
double |-->float64
String |-->string

OclAny |-->interface{}
OclFile |-->*oclfile.OclFile
OclProcess |-->*oclprocess.OclProcess
OclRandom |-->*oclrandom.OclRandom
OclDate |-->*ocldate.OclDate
OclType |-->reflect.Type
OclIterator |-->*ocliterator.OclIterator

OclException |-->*oclexception.OclException
AssertionException |-->*oclexception.AssertionException
ArithmeticException |-->*oclexception.ArithmeticException
IOException |-->*oclexception.IOException
IndexingException |-->*oclexception.IndexingException
NullAccessException |-->*oclexception.NullAccessException
AccessingException |-->*oclexception.AccessingException
ProgramException |-->*oclexception.ProgramException
SystemException |-->*oclexception.SystemException


void |-->

Sequence |-->*list.List
Set |-->*list.List
Map |-->map[interface{}]interface{}

Sequence(_1) |-->*list.List
Set(_1) |-->*list.List
Ref(void) |-->*interface{}
Ref(int) |-->*int
Ref(long) |-->*int64
Ref(double) |-->*float64
Ref(String) |-->*string
Ref(boolean) |-->*bool
Ref(_1) |-->_1<when> _1 Ref
Ref(_1) |-->_1<when> _1 Function
Ref(_1) |-->*_1`name<when> _1 Class
Ref(_1) |-->*_1

Map(_1,_2) |-->map[_1]_2
Function(_1,_2) |-->func(_1) _2

_1 |-->_1`alias<when> _1 datatype

_1 |-->*_1`name<when> _1 Class

_1 |-->_1







Parameter::
_1 : _2, _3 |-->_1 _2, _3
_1 : _2 |-->_1 _2



ParameterArgument::
_1, _2 |-->_1, _2
_1 |-->_1






Operation::
static query _1(_2) : _3 pre: _4 post: _5 activity : _6 |-->  _1(_2) _3\n

static query _1<_2>(_3) : _4 pre: _5 post: _6 activity : _7 |-->  _1(_3) _4\n

query _1(_2) : _3 pre: _4 post: _5 activity : _6 |-->  _1(_2) _3\n

query _1<_2>(_3) : _4 pre: _5 post: _6 activity : _7 |-->  _1(_3) _4\n


static operation _1(_2) : _3 pre: _4 post: _5 activity: _6 |-->  _1(_2)\n<when> _3 void

static operation _1(_2) : _3 pre: _4 post: _5 activity: _6 |-->  _1(_2) _3\n

static operation _1<_2>(_3) : _4 pre: _5 post: _6 activity : _7 |-->  _1(_3) _4\n

operation _1(_2) : _3 pre: _4 post: _5 activity: _6 |-->  _1(_2)\n<when> _3 void

operation _1(_2) : _3 pre: _4 post: _5 activity: _6 |-->  _1(_2) _3\n

operation _1<_2>(_3) : _4 pre: _5 post: _6 activity : _7 |-->  _1(_3) _4\n


