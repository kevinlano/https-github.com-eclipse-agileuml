usecaseDefinition::
usecase _1 ( _2 ) : _3 { _4 } |-->import SwiftUI\n\nstruct _1Screen : View\n{ _4  @ObservedObject var model : ModelFacade\n\n  var body: some View {\n    VStack(alignment: HorizontalAlignment.leading, spacing: 20) {\n_2      HStack(spacing: 20) {\n        Button(action: { self.model.cancel_1() } ) { Text("Cancel") }\n        Button(action: { self.model._1(_x: bean) } ) { Text("_1") }\n      }.buttonStyle(DefaultButtonStyle())\n    }.padding(.top)\n  }\n}\n\n

usecase _1 : _2 { _3 } |-->import SwiftUI\n\nstruct _1Screen : View\n{ _3  @ObservedObject var model : ModelFacade\n\n  var body: some View {\n    VStack(alignment: HorizontalAlignment.leading, spacing: 20) {\n      HStack(spacing: 20) {\n        Button(action: { self.model.cancel_1() } ) { Text("Cancel") }\n        Button(action: { self.model._1(_x: bean) } ) { Text("_1") }\n      }.buttonStyle(DefaultButtonStyle())\n    }.padding(.top)\n  }\n}\n\n

usecase _1 ( _2 ) { _3 } |-->import SwiftUI\n\nstruct _1Screen : View\n{ _3  @ObservedObject var model : ModelFacade\n\n  var body: some View {\n    VStack(alignment: HorizontalAlignment.leading, spacing: 20) {\n_2      HStack(spacing: 20) {\n        Button(action: { self.model.cancel_1() } ) { Text("Cancel") }\n        Button(action: { self.model._1(_x: bean) } ) { Text("_1") }\n      }.buttonStyle(DefaultButtonStyle())\n    }.padding(.top).onAppear(perform:\n        { bean = model.current_3`bodyEntityName })\n  }\n}\n\n




parameterDeclarations::
, |-->
_1 |-->_1
, _* |-->_*`recurse
_1 _* |-->_1_*`recurse


parameterDeclaration::
_1 : String |-->      HStack {\n        Text("_1:").bold()\n        Divider()\n        TextField("_1", text: $bean._1)\n      }.frame(width: 200, height: 30).border(Color.gray)\n

_1 : int |-->      HStack {\n        Text("_1:").bold()\n        Divider()\n        TextField("_1", value: $bean._1, formatter: NumberFormatter()).keyboardType(.numberPad)\n      }.frame(height: 30).border(Color.gray)\n

_1 : long |-->      HStack {\n        Text("_1:").bold()\n        Divider()\n        TextField("_1", value: $bean._1, formatter: NumberFormatter()).keyboardType(.numberPad)\n      }.frame(height: 30).border(Color.gray)\n

_1 : double |-->      HStack {\n        Text("_1:").bold()\n        Divider()\n        TextField("_1", value: $bean._1, formatter: NumberFormatter()).keyboardType(.decimalPad)\n      }.frame(height: 30).border(Color.gray)\n

_1 : _2 |-->      HStack {\n        Text("_1:").bold()\n        Divider()\n        TextField("_1", text: $bean._1)\n      }.frame(width: 200, height: 30).border(Color.gray)\n


usecaseBody::
_* |-->_*


usecaseBodyElement::
parameter _1 : _2 ; |--> 
precondition _1 ; |--> 
extends _1 ; |--> 
extendedBy _1 ; |--> 
activity: _1 ; |--> 
:: _1 |-->
_1 |-->_1
   

stereotype::
stereotype _1 ; |-->
stereotype entity = _1 ; |-->@State var bean : _1VO = _1VO()\n
stereotype _1 = _2 ; |-->




bodyEntityName::
_* |-->_*`elementEntityName


elementEntityName::
parameter _1 : _2 ; |--> 
precondition _1 ; |--> 
extends _1 ; |--> 
extendedBy _1 ; |--> 
activity: _1 ; |--> 
:: _1 |-->
_1 |-->_1`stereotypeEntityName


stereotypeEntityName::
stereotype _1 ; |-->
stereotype entity = _1 ; |-->_1
stereotype _1 = _2 ; |-->


