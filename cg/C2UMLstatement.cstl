declaration::
_1 ; |-->    var _1`C2UMLdeclaredVariable : _1`C2UMLtypelhs_1`declaredType_1`C2UMLtyperhs ;\n
_1 _2 ; |-->    var _2`C2UMLdeclaredVariable : _2`C2UMLtypelhs_1 _2`C2UMLtyperhs := _2`C2UMLdeclaredValue ;\n


declaredType::
_1 |-->_1
_* |-->_*`front


specifierQualifierList::
_1 |-->_1
_* |-->_*


declarationSpecifiers::
_1 |-->_1
_* |-->_*


declarationSpecifier::
_1 |-->_1

storageClassSpecifier::
typedef |-->datatype
_1 |-->

typeQualifier::
_1 |-->

typeSpecifier::
void |-->void
int |-->int
char |-->int
short |-->int
va_list |-->int
long |-->long
time_t |-->long
size_t |-->long
clock_t |-->long
fpos_t |-->long
float |-->double
double |-->double
signed |-->
unsigned |-->
_Bool |-->boolean

char *** |-->Ref(Ref(String))
char ** |-->Ref(String)
char * |-->String
FILE *** |-->Ref(Ref(OclFile))
FILE ** |-->Ref(OclFile)
FILE * |-->OclFile
_1 *** |-->Ref(Ref(Ref(_1)))
_1 ** |-->Ref(Ref(_1))
_1 * |-->Ref(_1)
_1 _2 |-->_1
_1 |-->_1


structOrUnionSpecifier::
struct _1 { _2 } ; |-->class _1\n{_2\n}\n\n
struct _1 { _2 } |-->class _1\n{_2\n}\n\n
union _1 { _2 } |-->class _1\n{_2\n}\n\n
struct { _2 } |-->class {_2}
union { _2 } |-->class {_2}
struct tm |-->OclDate
struct _1 |-->_1
union _1 |-->_1


structDeclarationList::
_* |-->_*
_1 |-->_1

structDeclaration::
_1 ; |-->  attribute _1`C2UMLdeclaredVariable : _1`declaredType ;\n


enumSpecifier::
enum _1 { _2 } |-->enumeration _1\n{_2\n}\n\n
enum _1 |-->_1


enumeratorList::
_1 |-->_1
_* |-->_*


enumerator::
_1 = _2 |-->_1
_1 |-->_1

enumerationConstant::
_1 |-->  literal _1\n

declarator::
_1 _2 |-->_2
_1 |-->_1

directDeclarator::
( _1 ) |-->_1
_1 [ _2 ] |-->_1
_1 [ ] |-->_1
_1 ( _2 ) |-->_1(_2)
_1 ( ) |-->_1()
_1 |-->_1


typedefName::
_1 |-->_1


initDeclaratorList::
_* |-->_*`first
_1 |-->_1


initDeclarator::
_1 = _2 |-->_2
_1 |-->_1



initializer::
{ _1 } |-->Sequence{ _1 }
_1 |-->_1


initializerList::
_* |-->_*
_1 |-->_1


typeName::
_1 |-->_1`C2UMLtypes

parameterTypeList::
_1 , ... |-->_1, _va_arg_sq : Sequence(OclAny)
_1 |-->_1


parameterList::
_* |-->_*
_1 |-->_1

parameterDeclaration::
_1 _2 |-->_2`C2UMLdeclaredVariable : _2`C2UMLtypelhs_1 _2`C2UMLtyperhs


expression::
_1 , _2 |-->_2
_1 |-->_1

assignmentExpression::
_1 = _2 |-->_2
_1 *= _2 |-->(_1*_2)
_1 /= _2 |-->(_1/_2)
_1 %= _2 |-->(_1%_2)
_1 *= _2 |-->(_1*_2)
_1 += _2 |-->(_1+_2)
_1 -= _2 |-->(_1-_2)
_1 <<= _2 |-->(_1*(2->pow(_2)))
_1 >>= _2 |-->(_1/(2->pow(_2)))
_1 &= _2 |-->MathLib.bitwiseAnd(_1,_2)
_1 ^= _2 |-->MathLib.bitwiseXor(_1,_2)
_1 |= _2 |-->MathLib.bitwiseOr(_1,_2)
_1 |-->_1


conditionalExpression::
_1 ? _2 : _3 |-->if _1 then _2 else _3 endif
_1 |-->_1

logicalOrExpression::
_1 || _2 |-->_1 or _2
_1 |-->_1

logicalAndExpression::
_1 && _2 |-->_1 & _2
_1 |-->_1

inclusiveOrExpression::
_1 | _2 |-->MathLib.bitwiseOr(_1, _2)
_1 |-->_1

exclusiveOrExpression::
_1 ^ _2 |-->MathLib.bitwiseXor(_1, _2)
_1 |-->_1

andExpression::
_1 & _2 |-->MathLib.bitwiseAnd(_1,_2)
_1 |-->_1

equalityExpression::
_1 == _2 |-->_1 = _2
_1 != _2 |-->_1 /= _2
_1 |-->_1

relationalExpression::
_1 < _2 |-->_1 < _2
_1 <= _2 |-->_1 <= _2
_1 >= _2 |-->_1 >= _2
_1 > _2 |-->_1 > _2
_1 |-->_1

shiftExpression::
_1 << _2 |-->_1*(2->pow(_2))
_1 >> _2 |-->_1/(2->pow(_2))
_1 |-->_1

additiveExpression::
_1 + _2 |-->_1 + _2
_1 - _2 |-->_1 - _2
_1 |-->_1

multiplicativeExpression::
_1 * _2 |-->_1 * _2
_1 / _2 |-->_1 / _2
_1 % _2 |-->_1 mod _2
_1 |-->_1

castExpression::
( _1 ) _2 |-->_2->oclAsType(_1)
_1 |-->_1

unaryExpression::
++ ++ _1 |-->_1
++ _1 |-->_1
-- -- _1 |-->_1
-- _1 |-->_1
& _1 |-->?(_1)
* _1 |-->!(_1)
- _1 |-->-_1
+ _1 |-->_1
~ _1 |-->MathLib.bitwiseNot(_1)
sizeof ( _1 ) |-->typesize(_1)
sizeof _1 |-->typesize(_1)
_1 |-->_1


postfixExpression::
_1 [ _2 ] [ _3 ] |-->(_1->at(_2+1))->at(_3+1)
_1 [ _2 ] |-->_1->at(_2+1)
_1 [ _2 ] . _3 |-->(_1->at(_2+1))._3
_1 [ _2 ] -> _3 |-->(!(_1->at(_2+1)))._3
_1 [ _2 ] . _3 ( _4 ) |-->(_1->at(_2+1))._3(_4)
_1 [ _2 ] . _3 ( ) |-->(_1->at(_2+1))._3()

va_start ( _1 ) |-->    _1`first := 1 ;\n
va_end ( _1 ) |-->    _1`first := 0 ; \n

malloc ( _1 ) |-->Ref(_1`argtype){1}
calloc ( _1 ) |-->Ref(_1`argstype){_1`argsn}
realloc ( _1 ) |-->_1`first->resizeTo(_1`last)
va_arg ( _1 ) |-->_va_arg_sq->at(_1`first)->oclAsType(_1`argstype)

sin ( _1 ) |-->(_1)->sin()
cos ( _1 ) |-->(_1)->cos()
tan ( _1 ) |-->(_1)->tan()
asin ( _1 ) |-->_1->asin()
acos ( _1 ) |-->_1->acos()
atan ( _1 ) |-->_1->atan()
sinh ( _1 ) |-->_1->sinh()
cosh ( _1 ) |-->_1->cosh()
tanh ( _1 ) |-->_1->tanh()
exp ( _1 ) |-->_1->exp()
log ( _1 ) |-->_1->log()
log10 ( _1 ) |-->_1->log10()
sqrt ( _1 ) |-->_1->sqrt()
ceil ( _1 ) |-->_1->ceil()->oclAsType(double)
floor ( _1 ) |-->_1->floor()->oclAsType(double)
fabs ( _1 ) |-->(_1)->abs()
abs ( _1 ) |-->(_1)->abs()
labs ( _1 ) |-->(_1)->abs()
pow ( _1 ) |-->(_1`first)->pow(_1`last)

atof ( _1 ) |-->(_1)->toReal()
atoi ( _1 ) |-->(_1)->toInteger()
atol ( _1 ) |-->(_1)->toLong()
isalnum ( _1 ) |-->(_1)->byte2char()->isMatch("[a-zA-Z0-9]")
isalpha ( _1 ) |-->(_1)->byte2char()->isMatch("[a-zA-Z]")
isdigit ( _1 ) |-->(_1)->byte2char()->isMatch("[0-9]")
islower ( _1 ) |-->(_1)->byte2char()->isMatch("[a-z]")
isupper ( _1 ) |-->(_1)->byte2char()->isMatch("[A-Z]")
isspace ( _1 ) |-->(_1 = 32 or (_1 <= 13 & _1 >= 9))
iscntrl ( _1 ) |-->(_1 >= 0 & _1 <= 31)
isgraph ( _1 ) |-->(_1 <= 126 & _1 >= 33)
isprint ( _1 ) |-->(_1 <= 126 & _1 >= 32)
ispunct ( _1 ) |-->(_1)->byte2char()->isMatch("[!-/:-@\\[-'{|}~]")
isxdigit ( _1 ) |-->(_1)->byte2char()->isMatch("[0-9A-Fa-f]")
tolower ( _1 ) |-->(if _1 >= 65 & _1 <= 90 then _1+32 else _1 endif)
toupper ( _1 ) |-->(if _1 >= 97 & _1 <= 122 then _1-32 else _1 endif)

strlen ( _1 ) |-->(_1)->size()
strstr ( _1 ) |-->if (_1`first)->indexOf(_1`last) > 0 then _1`first.subrange(_1`first->indexOf(_1`last)) else "" endif
strchr ( _1 ) |-->if (_1`first)->indexOf(_1`last->byte2char()) > 0 then _1`first.subrange(_1`first->indexOf(_1`last->byte2char())) else "" endif
strrchr ( _1 ) |-->if (_1`first)->lastIndexOf(_1`last->byte2char()) > 0 then _1`first.subrange(_1`first->lastIndexOf(_1`last->byte2char())) else "" endif
strcpy ( _1 ) |-->_1`last
strncpy ( _1 ) |-->(_1`third).subrange(1,_1`last)
strcat ( _1 ) |-->(_1`first + _1`last)
strncat ( _1 ) |-->(_1`first + (_1`third).subrange(1,_1`last))
strcmp ( _1 ) |-->(_1`first)->compareTo(_1`last)
strncmp ( _1 ) |-->(_1`first)->compareTo((_1`third).subrange(1,_1`last))

fopen ( _1 ) |-->OclFile.newOclFile(_1)
fgetc ( _1 ) |-->_1.read()->char2byte()
getc ( _1 ) |-->_1.read()->char2byte()
fgets ( _1 ) |-->(_1`last).readLine().subrange(1,_1`third)
gets ( _1 ) |-->System_in.readLine()
ftell ( _1 ) |-->_1.getPosition()
feof ( _1 ) |-->_1.getEof()
getchar ( ) |-->System_in.read()->char2byte()
tmpfile ( ) |-->OclFile.createTemporaryFile("tmp","txt")

time ( _1 ) |-->OclDate.getSystemTime()/1000
difftime ( _1 ) |-->(_1`first - _1`last)
mktime ( _1 ) |-->((!_1).getTime()/1000)
localtime ( _1 ) |-->?OclDate.newOclDate_Time((!_1)*1000)
gmtime ( _1 ) |-->?OclDate.newOclDate_Time((!_1)*1000)
asctime ( _1 ) |-->(_1).toString()
ctime ( _1 ) |-->OclDate.newOclDate_Time((!_1)*1000).toString()


_1 ( _2 ) |-->_1(_2)
_1 ( ) |-->_1()
_1 . _2 ( _3 ) |-->_1._2(_3)
_1 . _2 ( ) |-->_1._2()

_1 . tm_sec |-->_1.getSecond()
_1 . tm_min |-->_1.getMinute()
_1 . tm_hour |-->_1.getHour()
_1 . tm_mday |-->_1.getDate()
_1 . tm_mon |-->_1.getMonth()
_1 . tm_year |-->_1.getYear()
_1 . tm_wday |-->_1.getDay()

_1 -> tm_sec |-->(!_1).getSecond()
_1 -> tm_min |-->(!_1).getMinute()
_1 -> tm_hour |-->(!_1).getHour()
_1 -> tm_mday |-->(!_1).getDate()
_1 -> tm_mon |-->(!_1).getMonth()
_1 -> tm_year |-->(!_1).getYear()
_1 -> tm_wday |-->(!_1).getDay()

_1 . _2 . _3 |-->_1._2._3
_1 . _2 |-->_1._2
_1 -> _2 -> _3 |-->!((!(_1))._2)._3
_1 -> _2 |-->(!(_1))._2
_1 ++ ++ |-->_1
_1 ++ |-->_1
_1 -- -- |-->_1
_1 -- |-->_1
_1 |-->_1


primaryExpression::
( _1 ) |-->(_1)

NULL |-->null
EOF |-->-1
HUGE_VAL |-->Math_PINFINITY

CHAR_BIT |-->8
CHAR_MAX |-->255
CHAR_MIN |-->0
INT_MAX |-->2147483647
INT_MIN |-->-2147483647
LONG_MAX |-->9223372036854775807
LONG_MIN |-->-9223372036854775808L
SCHAR_MAX |-->127
SCHAR_MIN |-->-127
UCHAR_MAX |-->255
UCHAR_MIN |-->0
SHRT_MAX |-->32767
SHRT_MIN |-->-32767
UINT_MAX |-->4294967295
USHRT_MAX |-->65535
ULONG_MAX |-->(1 + 2*(9223372036854775807)) 
FLT_RADIX |-->2
FLT_ROUNDS |-->1
FLT_DIG |-->6
FLT_EPSILON |-->1.0/100000
FLT_MANT_DIG |-->24
FLT_MAX |-->1.0*(10->pow(37))
FLT_MAX_EXP |-->128
FLT_MIN |-->1.0/(10->pow(37))
FLT_MIN_EXP |-->-125
DBL_DIG |-->10
DBL_EPSILON |-->1.0/1000000000
DBL_MANT_DIG |-->53
DBL_MAX |-->1.0*(10->pow(37)) 
DBL_MAX_EXP |-->1024
DBL_MIN |-->1.0/(10->pow(37)) 
DBL_MIN_EXP |-->-1021
EDOM |-->33
ERANGE |-->34 


_1 _2 _3 |-->_1 _2 _3
_1 _2 |-->_1 _2
_1 |-->_1->char2byte()<when> _1 character
_1 |-->_1<when> _1 not character
_* |-->_*


argumentExpressionList::
_1 , _2 |-->_1, _2
_* |-->_*
_1 |-->_1

argstype::
_1 , _2 |-->_2`argtype
_1 |-->_1`argtype


argtype::
sizeof ( _1 ) |-->_1
sizeof _1 |-->_1
_1 |-->_1`argtype


argsn::
_1 , _2 |-->_1

constantExpression::
_1 |-->_1->char2byte()<when> _1 character
_1 |-->_1<when> _1 not character


forExpression::
_1 |-->_1


forInitialisation::
_1 ; _2 ; _3 |-->  _1`C2UMLupdateForm ;\n
_1 ; ; _2 |-->  _1`C2UMLupdateForm ;\n
_1 ; _2 ; |-->  _1`C2UMLupdateForm ;\n
_1 ; ; |-->  _1`C2UMLupdateForm ;\n
 ; _1 ; _2 |-->
 ; ; _1 |-->
 ; _1 ; |-->
 ;  ;  |-->


forTest::
_1 ; _2 ; _3 |-->_2
_1 ; ; _2 |-->
_1 ; _2 ; |-->_2
_1 ; ; |-->
 ; _1 ; _2 |-->_1
 ; ; _1 |-->
 ; _1 ; |-->_1
 ;  ;  |-->

forIncrement::
_1 ; _2 ; _3 |-->    ; _3`C2UMLupdateForm
_1 ; ; _2 |-->    ; _2`C2UMLupdateForm
_1 ; _2 ; |-->
_1 ; ; |-->
 ; _1 ; _2 |-->    ; _2`C2UMLupdateForm
 ; ; _1 |-->    ; _1`C2UMLupdateForm
 ; _1 ; |-->
 ;  ;  |-->


statement::
_1 |-->_1

caseStatementBody::
_1 |--> or _1`caseStatementTest _1`caseStatementBody<when> _1 labeledStatement
case _1 : _2 |--> then _2 else skip ;\n
_1 |--> then _1 else skip ; \n


caseStatementTest::
case _1 : _2 |-->_switchVar = _1
default : _1 |-->
_1 : _2 |-->


labeledStatement::
case _1 : _2 |-->    if _switchVar = _1 _2`caseStatementBody
default : _1 |-->    _1\n
_1 : _2 |-->    _2\n

expressionStatement::
_1 ; |-->_1`C2UMLupdateForm

compoundStatement::
{ _1 } |-->    (_1    skip) 
{ } |-->    skip

selectionStatement::
if ( _1 ) _2 |-->    if _1\n    then\n  _2\n    else skip ;\n
 
if ( _1 ) _2 else _3 |-->    if _1\n    then\n  _2\n    else\n  _3\n

switch ( _1 ) _2 |-->    for _switchx : Integer.subrange(1,1)\n    do (\n    var _switchVar := _1 ;\n  _2\n    )\n


iterationStatement::
while ( _1 ) _2 |-->_1`C2UMLpresideeffect    while _1\n    do ( \n  _2\n  _1`C2UMLpresideeffect    )\n

do _1 while ( _2 ) ; |-->while true\n    do ( \n  _1\n  _2`C2UMLpresideeffect    ; if _2 then skip else break\n    )\n

for ( _1 ) _2 |-->_1`forInitialisation    while _1`forTest\n  do\n  (_2 \n  _1`forIncrement\n    )\n


jumpStatement::
goto _1 ; |-->    _1() ;\n
continue ; |-->    continue ;\n
break ; |-->    break ;\n
return _1 ; |-->_1`C2UMLpresideeffect    return _1\n
return ; |-->    return\n

blockItemList::
_* |-->_*

blockItem::
_1 |-->_1

